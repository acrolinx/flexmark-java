name: Release
on:
  workflow_dispatch:
permissions:
  contents: write
  pull-requests: write

jobs:
  Release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Print version
        id: printVersion
        run: echo "RELEASE_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout | sed 's/-SNAPSHOT//')" >> "$GITHUB_OUTPUT"

      - name: Create PR Branch Name
        id: createPrBranchName
        env:
          RELEASE_VERSION: ${{ steps.printVersion.outputs.RELEASE_VERSION }}
        run: | 
          echo "PR_BRANCH_NAME=publish-v$RELEASE_VERSION" >> "$GITHUB_OUTPUT"

      - name: Release with Maven
        run: |
          git config --global user.email GIT_USER_EMAIL
          git config --global user.name GIT_USER_NAME
          git checkout -b $PR_BRANCH_NAME
          mvn -s .m2/settings.xml -B -Dusername=$GIT_USER_NAME -Dpassword=GITHUB_TOKEN release:prepare release:perform
        env:
          PR_BRANCH_NAME: ${{ steps.createPrBranchName.outputs.PR_BRANCH_NAME }}
          GIT_USER_NAME: acrolinx-opensource
          GIT_USER_EMAIL: opensource@acrolinx.com
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub PR
        run: |
          gh pr create --title "Release $RELEASE_VERSION" --body "" --base "$CHECKOUT_BRANCH_NAME" --reviewer ${{ github.actor }}
          gh pr merge $PR_BRANCH_NAME --auto --rebase --delete-branch
        env:
          GH_TOKEN: ${{ secrets.PAT }}
          RELEASE_VERSION: ${{ steps.printVersion.outputs.RELEASE_VERSION }}
          CHECKOUT_BRANCH_NAME: ${{ github.ref_name }}
          PR_BRANCH_NAME: ${{ steps.createPrBranchName.outputs.PR_BRANCH_NAME }}
