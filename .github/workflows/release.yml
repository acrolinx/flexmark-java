name: Release
on:
  workflow_dispatch:
permissions:
  contents: write
  pull-requests: write

jobs:
  Release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Java
        uses: actions/setup-java@v5
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Create Release Version Name
        id: createReleaseVersionName
        run: echo "RELEASE_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout | sed 's/-SNAPSHOT//')" >> "$GITHUB_OUTPUT"

      - name: Create Tag Name
        id: createTagName
        env:
          RELEASE_VERSION: ${{ steps.createReleaseVersionName.outputs.RELEASE_VERSION }}
        run: echo "TAG_NAME=v$RELEASE_VERSION" >> "$GITHUB_OUTPUT"

      - name: Create PR Branch Name
        id: createPrBranchName
        env:
          RELEASE_VERSION: ${{ steps.createReleaseVersionName.outputs.RELEASE_VERSION }}
        run: |
          echo "PR_BRANCH_NAME=publish-v$RELEASE_VERSION" >> "$GITHUB_OUTPUT"

      - name: Release with Maven
        env:
          PR_BRANCH_NAME: ${{ steps.createPrBranchName.outputs.PR_BRANCH_NAME }}
          GIT_USER_NAME: acrolinx-opensource
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MAVEN_GPG_KEY: ${{ secrets.CODE_SIGNING_PRIV_KEY }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.CODE_SIGNING_PWD }}
          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          SONATYPE_PW: ${{ secrets.SONATYPE_PW }}
        run: |
          git config user.email opensource@acrolinx.com
          git config user.name $GIT_USER_NAME
          git checkout -b $PR_BRANCH_NAME
          mvn -s .m2/settings.xml -P sign -B -Dusername=$GIT_USER_NAME -Dpassword=$GITHUB_TOKEN -DpreparationGoals="clean spotless:apply verify" -DcompletionGoals="spotless:apply" release:prepare release:perform
   
      - name: Create GitHub PR
        env:
          GH_TOKEN: ${{ secrets.PAT }}
          RELEASE_VERSION: ${{ steps.createReleaseVersionName.outputs.RELEASE_VERSION }}
          CHECKOUT_BRANCH_NAME: ${{ github.ref_name }}
          PR_BRANCH_NAME: ${{ steps.createPrBranchName.outputs.PR_BRANCH_NAME }}
        run: |
          git push -u origin HEAD
          gh pr create --title "Release $RELEASE_VERSION" --body "" --base "$CHECKOUT_BRANCH_NAME" --reviewer ${{ github.actor }}
          gh pr merge $PR_BRANCH_NAME --auto --rebase --delete-branch
          
      - name: Create Draft Release
        env:
          GH_TOKEN: ${{ github.token }}
          TAG_NAME: ${{ steps.createTagName.outputs.TAG_NAME }}
        run: gh release create $TAG_NAME --title $TAG_NAME --verify-tag --draft
